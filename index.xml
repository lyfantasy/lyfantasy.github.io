<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LQY的备忘录</title>
    <link>https://lyfantasy.github.io/</link>
    <description>Recent content on LQY的备忘录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Oct 2023 10:19:23 +0800</lastBuildDate><atom:link href="https://lyfantasy.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用yt-dlp下载视频</title>
      <link>https://lyfantasy.github.io/post/yt-dlp/</link>
      <pubDate>Wed, 18 Oct 2023 10:19:23 +0800</pubDate>
      
      <guid>https://lyfantasy.github.io/post/yt-dlp/</guid>
      <description>yt-dlp使用 环境依赖 ffmpeg
下载视频 1.显示下载列表
yt-dlp -F url 2.选择下载序号组合
yt-dlp -f video_num+aideo_num url 使用cookie下载b站视频 1.添加参数
yt-dlp.exe --cookies-from-browser cookies-url -F video-url ##cookies-url 替换为浏览器cookie地址 ##video-url 替换为视频地址 ##以chrome为例(windows)，chrome:&amp;#34;C:\Users\luo\AppData\Local\Google\Chrome\User Data\Default&amp;#34; ##其他浏览器，如firefox，firefox:&amp;#34;C:\Users\luo\AppData\Roaming\Mozilla\Firefox\Profiles\rlzlxs0i.default-release&amp;#34; </description>
    </item>
    
    <item>
      <title>RabbitMQ消息队列</title>
      <link>https://lyfantasy.github.io/post/rabbitmq/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/rabbitmq/</guid>
      <description>RabbitMQ消息队列 1,什么是RabbitMQ? RabbitMQ是一种消息队列，目的是为了缓解和分发处理服务器接受到的消息和请求
2,在docker中运行rabbitMQ 拉取镜像
docker pull rabbitmq:&amp;lt;version&amp;gt; 运行镜像
docker run -itd --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:&amp;lt;version&amp;gt; 支持环境变量，具体参考文档：环境变量
3,spring-amqp sprinng-amqp默认实现了rabbitMQ的消息队列
在spring项目中引入依赖
&amp;lt;!--版本3.1.4--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2.1,发送消息 @Autowired private RabbitTemplate template; @Test void test() { String queueName = &amp;#34;queue1&amp;#34;; for (int i = 1; i &amp;lt;= 50; i++) { template.convertAndSend(queueName, &amp;#34;this is msg +++&amp;#34; + i); } System.out.println(); } 2.2,接收消息 @Component public class MQListener { //该方法参数即为接受的消息,默认为object,会自动转换 @RabbitListener(queue = &amp;#34;queue1&amp;#34;) void getMsg(String str) { System.</description>
    </item>
    
    <item>
      <title>nacos快速上手</title>
      <link>https://lyfantasy.github.io/post/springcloudalibaba/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/springcloudalibaba/</guid>
      <description>SpringCloud SpringCloudAlibaba工程构建 父工程中的导入依赖进行统一版本管理，版本对应参考网址：
springCloud对应SpringBoot版本：https://spring.io/projects/spring-cloud#overview springCloud对应SpringCloudAlibaba：https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E 父工程导入依赖：
&amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2022.0.2&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2022.0.0.0&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.2&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; 子工程依赖为：
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 注意：子工程中的SpringBoot配置文件必须为application.xxxx,否则无法正确加载配置文件
启动nacos服务 注意：
在2.2.0.1和2.2.1版本时，必须执行此变更，否则无法启动；其他版本为建议设置。
修改conf目录下的application.properties文件。
设置其中的nacos.core.auth.plugin.nacos.token.secret.key值，详情可查看鉴权-自定义密钥.
注意，文档中的默认值SecretKey012345678901234567890123456789012345678901234567890123456789和VGhpc0lzTXlDdXN0b21TZWNyZXRLZXkwMTIzNDU2Nzg=为公开默认值，可用于临时测试，实际使用时请务必更换为自定义的其他有效值。
可以修改start.cmd中的启动模式为单例模式或者是集群模式（standalone/cluster）;
服务启动后，访问默认网址http://localhost:8848/nacos/index.html进行服务管理
服务调用 使用Ribbon的负载均衡来调用服务 在配置类中添加RestTemplate来获取服务 注意：在springCloud2022.0.0.1版本中使用@LoadBalanced注解，需要先在pom中添加spring-cloud-starter-loadbalancer的依赖才会产生作用
@LoadBalanced @Bean public RestTemplate restTemplate(){ return new RestTemplate(); } 在要使用的类中自动装配restTemplate,使用value获取配置文件中的微服务访问的地址</description>
    </item>
    
    <item>
      <title>windows设置hyper-v虚拟机网络</title>
      <link>https://lyfantasy.github.io/post/%E8%AE%BE%E7%BD%AEhyperv%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Fri, 18 Aug 2023 15:40:51 +0800</pubDate>
      
      <guid>https://lyfantasy.github.io/post/%E8%AE%BE%E7%BD%AEhyperv%E7%BD%91%E7%BB%9C/</guid>
      <description>设置hyper-v网络 创建网络交换机，选择内部网络
以Ubuntu为例，在编辑网络设置
sudo vi /etc/netplan/00-installer-config.yaml 设置网络配置
network: ethernets: eth0: dhcp4: false addresses: [192.168.137.10/24] ##网络地址 routes: - to: default via: 192.168.137.1 ##网关 optional: true nameservers: addresses: [223.5.5.5,119.29.29.29] ##DNS解析服务器 version: 2 应用网络配置
sudo netplan apply 查看网络配置是否成功
ip addr 要使虚拟机访问外部网络，需要开启网卡中的网络共享功能</description>
    </item>
    
    <item>
      <title>docker下配置docker</title>
      <link>https://lyfantasy.github.io/post/nginx/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/nginx/</guid>
      <description>nginx配置(docker) #启动一个容器
docker run -itd --name nginx nginx 查看 容器 获取容器ID 或直接使用名字
docker container ls 在当前目录下创建目录：conf
mkdir conf 拷贝容器内 Nginx 默认配置文件到本地当前目录下的 conf 目录（$PWD 当前全路径）
docker cp nginx:/etc/nginx/nginx.conf $PWD/conf docker cp nginx:/etc/nginx/conf.d $PWD/conf 停止容器
docker container stop nginx 删除容器
docker container rm nginx 在当前目录下创建目录：html 放静态文件
mkdir html 启动nginx容器
sudo docker run -d --name nginx -p 8080:80 \ -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \ -v ~/nginx/html:/usr/share/nginx/html \ -v ~/nginx/conf.d/:/etc/nginx/conf.d \ -v ~/nginx/log/nginx/:/var/log/nginx \ nginx:1.24.0 反向代理配置 http { upstream myapp1 { server 127.</description>
    </item>
    
    <item>
      <title>select基本查询</title>
      <link>https://lyfantasy.github.io/post/mysql%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/mysql%E6%9F%A5%E8%AF%A2/</guid>
      <description>select语句 基本语句 select * from table_name; 去重语句 distinct去掉重复的结果 select distinct user_role from user; 别名as或者使用空格 select user_role as u_role from user; select user_role u_role from user; 空值参与运算 1.空值 NULL 2.空值不等于0，&amp;rsquo;&amp;rsquo;,&amp;rsquo;null&amp;rsquo; 3.空值参与运算，结果也一定为空
着重号 着重号用以区分关键字和字段。
select * from &amp;#39;order&amp;#39;; 显示表结构 describe table_name; where进行过滤 select * from user where list_name = &amp;#39;value&amp;#39;; 运算符 排序与分页 排序顺序
1.asc(升序排序) 2.desc(降序排序) 默认按照升序排序
select * from user order by user_salary desc; 二级排序 先按照以及排序，当一级排序后存在相同的结果时，按照二级进行排序 select * from user order by user_salary desc , user_num asc; 分页 使用limit关键字进行分页limit(偏移量,条目数) # 查询20条数据，偏移量20，即查询20到40这一段数据 select * from user limit 20,20; 多表查询 内连接 查询交集部分 select u.</description>
    </item>
    
    <item>
      <title>MySQL函数</title>
      <link>https://lyfantasy.github.io/post/mysql%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/mysql%E5%87%BD%E6%95%B0/</guid>
      <description>MySQL函数 数值函数 函数 作用 ABS(x) 返回x绝对值 SIGN(x) 返回x的符号。正数返回1，负数返回-1，0返回0 PI() 返回圆周率的值 CEIL(x),CEILING(x) 返回大于或者等于某个值的最小整数 FLOOR(x) 返回小于或者等于某个值的最大整数 LEAST(x1,x2,x3,&amp;hellip;) 返回列表中的最小值 GREATEST(x1,x2,x3&amp;hellip;) 返回列表中的最大值 MOD(x,y) 返回x/y的余数 RAND() 返回0~1的随机值 RAND(x) 返回0~1的随机值，x用作种子值，当x相同时，返回的值相同 ROUND(x) 对一个数值进行四舍五入后进行取整 ROUND(x,y) 对一个数值进行四舍五入后进行取整，然后保留到小数点后y位 TRUNCATE(x,y) 返回x截断为y位小数的结果 SQRT(x) 返回x的平方根，当x为负时，返回NULL 指数与对数 函数 作用 POW(x,y) 返回x的y次方 EXP(x) 返回e的x次方 LN(x) 返回以e为底，x的对数 LOG10(x) 返回以10为底，x的对数 LOG2(x) 返回以2为底x的对数 进制转换 函数 作用 BIN(x) 返回x的二进制数 HEX(x) 返回x的16进制数 OCT(x) 返回x的8进制数 CONV(x,f1,f2) 将f1进制的数转化为f2进制的数 字符串函数 函数 作用 ASCII(s) 返回字符串第一个字符的ascii码 char_length(s) 返回字符串的字符数 LENGTH(s) 返回字符串的字符数 CONTACT(s1,s2,s3..) 字符串拼接 CONRTACT_WS(x,s1,s2,s3..) 拼接字符串并在中间加上x INSERT(str,idx,len,replacestr) 将字符串str从idx位置开始，len长度的字符串替换为replacestr REPLACE(str,a,b) 用字符串b替换所有出现在字符串str中的a UPER(s) 将字符串s的所有字母转换为大写字母 LOWER(s) 将字符串s的所有字母转换为小写字母 LEFT(str,n) 返回字符串最左边的n个字符 RIGHT(str,n) 返回字符串右边的n个字符 LPAD(str,len,pad) 用字符串pad对str最左边进行填充，直到str的长度为len RPAD(str,len,pad) 用字符串pad对str最右边进行填充，直到str的长度为len LTRIM(s) 去掉字符串左侧的空格 RTRIM(s) 去掉字符串右侧的空格 TRIM(s) 去掉字符串s开始与结尾的空格 TRIM(s1 FROM s) 去掉s开始与结尾的s1 TRIM(LEADING s1 FROM s) 去掉s开始处的s1 TRIM(TRAILING s1 FROM s) 去掉s结尾处的s1 REPEAT(str,n) 返回str重复n次的结果 SPACE(n) 返回n个空格 日期与时间 函数 作用 CURDATE() 返回当前日期 CURTIME() 返回当前时间 NOW() 返回当前日期和时间 常用聚合函数 函数 作用 AVG() 计算某一平均数 SUM() 计算某一字段的总数 MAX() 某一字段中的最大值 MIN() 某一字段中的最小值 COUNT() 计算某一字段在查询结果中出现的个数（不计算NULL值），使用MyISAM引擎时三者效率相同，使用InnoDB时，count(*)=count(1)&amp;gt;count(字段) GROUP BY 先按照条件进行分组，然后在分别进行查询。 # with rollup整体看作一组计算一次 select table_list from table_name where param_list group by table_list; # with rollup; </description>
    </item>
    
    <item>
      <title>MySQL的安装</title>
      <link>https://lyfantasy.github.io/post/mysql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/mysql%E5%AE%89%E8%A3%85/</guid>
      <description>mysql安装 Ubuntu安装mysql 使用apt命令安装mysql
sudo apt install mysql-server 先设置root密码
ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED WITH mysql_native_password by &amp;#39;passwd&amp;#39;; FLUSH PRIVILEGES; 再初始化设置
sudo mysql_secure_installation 创建新用户 create user &amp;#39;username&amp;#39;@&amp;#39;host&amp;#39; identified by &amp;#39;passwd&amp;#39;; # 授予权限 grant all privileges on database.table to &amp;#39;username&amp;#39;@&amp;#39;host&amp;#39;; #查看权限 show grants for &amp;#39;username&amp;#39;@&amp;#39;host&amp;#39;; # 刷新权限 flush privileges; Docker安装mysql 拉取镜像
sudo docker pull mysql 运行镜像
sudo docker run -itd --name mysql8 -p 3306:3306 -e MYSQL_ROOT_PASSWORD mysql:tag 进入容器
sudo exec -it mysql8 bash 开启远程访问 开启远程访问权限： use mysql; update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;username&amp;#39;; 开启端口： ufw allow 3306; sudo vi /etc/mysql/mysql.</description>
    </item>
    
    <item>
      <title>事务的特性</title>
      <link>https://lyfantasy.github.io/post/%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lyfantasy.github.io/post/%E4%BA%8B%E5%8A%A1/</guid>
      <description>MySQL事务 1,事务的四大特性 四大特性即：
原子性：一组操作封装为一个执行单元，该组操作指令只能同时成功或者同时失败。 一致性：事务执行前后数据的状态和合法性是一致的。 隔离性：事务之间具有隔离性，根据个隔离级别确定影响的大小。 持久性：事务执行完毕后，数据会被永久改变，持久化到磁盘上。 2,事务的隔离级别 事务之间的执行具有四种影响的现象，由低到高依次排列为：
脏写：事务a修改了事务b修改了但未提交的数值，事务a回滚，导致事务b写入的数值丢失。 脏读：读取到别的事务写入的临时数据，事务回滚了，数值丢失。 不可重复读：读取到的数据被其他事务修改了，再次读取时数据不一致。 幻读：事务读取到了其他事务提交的临时数据，下次再次读取时，事务回滚了，之前读取的数据不存在了。 MySQL对此的解决方案，设置隔离级别，分别为：
隔离级别 解决问题 锁 读未提交(READ UNCOMMITTED) +=脏写 否 读已提交(READ COMMITTED) +=脏读 否 可重复读(REPEATABLE READ) +=不可重复读取 否 序列化(SERIALIZABLE) +=幻读 是 MySQL默认的事务隔离级别为不可重复读。
手动设置隔离级别
SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL 隔离级别; #其中，隔离级别格式： &amp;gt; READ UNCOMMITTED &amp;gt; READ COMMITTED &amp;gt; REPEATABLE READ &amp;gt; SERIALIZABLE 或者
SET [GLOBAL|SESSION] TRANSACTION_ISOLATION = &amp;#39;隔离级别&amp;#39; #其中，隔离级别格式： &amp;gt; READ-UNCOMMITTED &amp;gt; READ-COMMITTED &amp;gt; REPEATABLE-READ &amp;gt; SERIALIZABLE </description>
    </item>
    
  </channel>
</rss>
